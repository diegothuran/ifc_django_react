"""
Django settings for ifc_monitoring project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY is now REQUIRED - no default value for security
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError(
        "SECRET_KEY environment variable is required. "
        "Generate one with: python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\""
    )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Configuração de hosts permitidos
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',  # Permite qualquer subdomínio do Render
]

# Permite adicionar hosts via variável de ambiente (útil para deploy)
if os.getenv('ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.getenv('ALLOWED_HOSTS').split(','))


# Application definition

INSTALLED_APPS = [
    # Unfold Admin (deve vir antes do django.contrib.admin)
    'unfold',
    'unfold.contrib.filters',
    'unfold.contrib.forms',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Terceiros
    'rest_framework',
    'drf_spectacular',  # OpenAPI/Swagger docs
    'corsheaders',  # CORS handling

    # Meus aplicativos
    'core',
    'plant_viewer',
    'sensor_management',
    'dashboard',
]

AUTH_USER_MODEL = 'core.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Para servir arquivos estáticos
    'corsheaders.middleware.CorsMiddleware',  # CORS - deve vir antes de CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # Compressão gzip para melhor performance
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ifc_monitoring.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ifc_monitoring.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração de banco condicional para desenvolvimento/produção
if os.getenv('DATABASE_URL'):
    DATABASES = {'default': dj_database_url.parse(os.getenv('DATABASE_URL'))}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Cache Configuration
# https://docs.djangoproject.com/en/5.2/ref/settings/#caches
# Configuração de cache com Redis para melhor performance
if os.getenv('REDIS_URL'):
    # Produção: Cache com Redis (recomendado)
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'SOCKET_CONNECT_TIMEOUT': 5,
                'SOCKET_TIMEOUT': 5,
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                }
            },
            'KEY_PREFIX': 'ifc_monitoring',
            'TIMEOUT': 3600 * 24 * 7,  # 7 dias
        }
    }
elif os.getenv('DATABASE_URL'):
    # Fallback: Cache em banco de dados (PostgreSQL no Render)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'ifc_cache_table',
            'TIMEOUT': 3600 * 24 * 7,  # 7 dias
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 3,
            }
        }
    }
else:
    # Desenvolvimento: Cache em memória
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
            'TIMEOUT': 3600 * 24,  # 1 dia
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'  # Barra inicial é crucial para Render/produção
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Whitenoise configuration for better static files handling
# Nota: Usando CompressedStaticFilesStorage sem Manifest para evitar erros no Render
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage" if not DEBUG else "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Whitenoise settings para servir arquivos estáticos
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# Configuração adicional para produção no Render
if not DEBUG:
    # Força o uso do WhiteNoise para servir arquivos estáticos
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações de arquivos de mídia (para uploads de usuários)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',  # Anonymous users: 100 requests per hour
        'user': '1000/hour',  # Authenticated users: 1000 requests per hour
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF Spectacular (OpenAPI/Swagger)
SPECTACULAR_SETTINGS = {
    'TITLE': 'IFC Digital Twin API',
    'DESCRIPTION': 'API REST para sistema de monitoramento industrial com visualização 3D de plantas IFC',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': True,
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = []
if os.getenv('CORS_ALLOWED_ORIGINS'):
    CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS').split(',')

# Para desenvolvimento local
CORS_ALLOW_CREDENTIALS = True
if DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        'http://localhost:3000',
        'http://localhost:8000',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:8000',
    ])

# ==================== CELERY CONFIGURATION ====================
# Configuração do Celery para processamento assíncrono de tarefas

# Broker URL (Redis)
if os.getenv('REDIS_URL'):
    CELERY_BROKER_URL = os.getenv('REDIS_URL')
else:
    # Fallback para desenvolvimento local
    CELERY_BROKER_URL = 'redis://localhost:6379/0'

# Result backend (onde os resultados são armazenados)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

# Serialização
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Timezone
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Configurações de performance
CELERY_WORKER_PREFETCH_MULTIPLIER = 4
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Expiração de resultados
CELERY_RESULT_EXPIRES = 3600 * 24  # 24 horas

# Configurações de retry
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Beat schedule (tarefas agendadas)
CELERY_BEAT_SCHEDULE = {
    'process-ifc-metadata': {
        'task': 'plant_viewer.tasks.process_pending_ifc_files',
        'schedule': 300.0,  # A cada 5 minutos
    },
    'cleanup-old-sensor-data': {
        'task': 'sensor_management.tasks.cleanup_old_sensor_data',
        'schedule': 3600.0 * 24,  # A cada 24 horas
    },
}

# Configurações específicas para produção no Render
if not DEBUG:
    # Configurações de segurança para produção
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # HSTS (HTTP Strict Transport Security)
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # SSL/HTTPS
    SECURE_SSL_REDIRECT = True
    
    # Configurações de sessão
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SAMESITE = 'Lax'

# Configuração de Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'plant_viewer': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'sensor_management': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'dashboard': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Configuração de logging para produção (após definição do LOGGING)
if not DEBUG:
    LOGGING['handlers']['file']['filename'] = '/tmp/django.log'

# ==================== SENTRY CONFIGURATION (Error Tracking) ====================
# Configuração do Sentry para monitoramento de erros em produção
if not DEBUG and os.getenv('SENTRY_DSN'):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    
    sentry_sdk.init(
        dsn=os.getenv('SENTRY_DSN'),
        integrations=[
            DjangoIntegration(),
        ],
        # Porcentagem de transações para monitoramento de performance
        traces_sample_rate=0.1,  # 10% das transações
        
        # Enviar informações de usuário
        send_default_pii=False,  # Não enviar PII por padrão (LGPD/GDPR)
        
        # Ambiente
        environment=os.getenv('SENTRY_ENVIRONMENT', 'production'),
        
        # Release tracking
        release=os.getenv('RENDER_GIT_COMMIT', 'unknown'),
        
        # Filtrar eventos sensíveis
        before_send=lambda event, hint: event if event.get('level') != 'debug' else None,
    )
    
    logger.info('Sentry configured successfully')

# ==================== UNFOLD ADMIN CONFIGURATION ====================

UNFOLD = {
    "SITE_TITLE": "IFC Monitoring System",
    "SITE_HEADER": "IFC Monitoring",
    "SITE_URL": "/",
    "SITE_ICON": {
        "light": lambda request: "/static/images/logo-light.svg",
        "dark": lambda request: "/static/images/logo-dark.svg",
    },
    "SITE_LOGO": {
        "light": lambda request: "/static/images/logo-light.svg",
        "dark": lambda request: "/static/images/logo-dark.svg",
    },
    "SITE_SYMBOL": "cube",  # Material Symbols icon
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "ENVIRONMENT": "IFC Monitoring System - Development" if DEBUG else "IFC Monitoring System - Production",
    "COLORS": {
        "primary": {
            "50": "239 246 255",
            "100": "219 234 254",
            "200": "191 219 254",
            "300": "147 197 253",
            "400": "96 165 250",
            "500": "59 130 246",
            "600": "37 99 235",
            "700": "29 78 216",
            "800": "30 64 175",
            "900": "30 58 138",
            "950": "23 37 84",
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "🇬🇧",
                "fr": "🇫🇷",
                "nl": "🇧🇪",
                "pt": "🇵🇹",
                "pt-br": "🇧🇷",
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Navegação",
                "separator": True,
                "items": [
                    {
                        "title": "Dashboard",
                        "icon": "dashboard",
                        "link": "/admin/",
                    },
                    {
                        "title": "Dashboard Público",
                        "icon": "public",
                        "link": "/dashboard/",
                    },
                    {
                        "title": "Visualizador 3D",
                        "icon": "view_in_ar",
                        "link": "/plant/",
                    },
                ],
            },
            {
                "title": "Gestão de Plantas",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Plantas",
                        "icon": "apartment",
                        "link": "/admin/plant_viewer/buildingplan/",
                    },
                    {
                        "title": "Lista de Plantas",
                        "icon": "list",
                        "link": "/plant/plants/",
                    },
                ],
            },
            {
                "title": "Sensores & Monitoramento",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Sensores",
                        "icon": "sensors",
                        "link": "/admin/sensor_management/sensor/",
                    },
                    {
                        "title": "Dados dos Sensores",
                        "icon": "insights",
                        "link": "/admin/sensor_management/sensordata/",
                    },
                    {
                        "title": "Alertas",
                        "icon": "warning",
                        "link": "/admin/sensor_management/sensoralert/",
                    },
                    {
                        "title": "Dashboard Sensores",
                        "icon": "analytics",
                        "link": "/sensors/dashboard/",
                    },
                ],
            },
            {
                "title": "Administração",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": "Usuários",
                        "icon": "people",
                        "link": "/admin/core/user/",
                    },
                    {
                        "title": "Grupos",
                        "icon": "group",
                        "link": "/admin/auth/group/",
                    },
                ],
            },
        ],
    },
}

