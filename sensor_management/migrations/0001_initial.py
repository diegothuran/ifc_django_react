# Generated by Django 5.2.7 on 2025-10-04 10:21

import django.core.validators
import django.utils.timezone
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nome descritivo do sensor (ex: 'Sensor Linha 1')", max_length=100, verbose_name='Nome do Sensor')),
                ('sensor_type', models.CharField(choices=[('counter', 'Contador'), ('temperature', 'Temperatura'), ('pressure', 'Pressão'), ('vibration', 'Vibração'), ('flow', 'Fluxo'), ('level', 'Nível'), ('other', 'Outro')], default='counter', help_text='Tipo de sensor IoT', max_length=20, verbose_name='Tipo de Sensor')),
                ('ip_address', models.GenericIPAddressField(help_text='Endereço IP do sensor na rede industrial', verbose_name='Endereço IP')),
                ('port', models.PositiveIntegerField(default=80, help_text='Porta de comunicação do sensor (1-65535)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Porta')),
                ('location_id', models.CharField(blank=True, help_text='Identificador para associar o sensor a um local no modelo 3D (ExpressID do IFC)', max_length=50, null=True, verbose_name='ID do Local')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o sensor está ativo e coletando dados', verbose_name='Ativo')),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do sensor e sua função', null=True, verbose_name='Descrição')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('last_data_collected', models.DateTimeField(blank=True, help_text='Data e hora da última coleta de dados bem-sucedida', null=True, verbose_name='Última Coleta')),
                ('collection_interval', models.PositiveIntegerField(default=60, help_text='Intervalo em segundos entre coletas de dados', verbose_name='Intervalo de Coleta (segundos)')),
                ('timeout', models.PositiveIntegerField(default=10, help_text='Tempo limite para comunicação com o sensor', verbose_name='Timeout (segundos)')),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensores',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0, help_text='Valor da contagem de objetos (para sensores de contagem)', verbose_name='Contagem')),
                ('value', models.FloatField(blank=True, help_text='Valor numérico do sensor (temperatura, pressão, etc.)', null=True, verbose_name='Valor')),
                ('unit', models.CharField(blank=True, help_text="Unidade de medida do valor (ex: '°C', 'bar', 'rpm')", max_length=20, null=True, verbose_name='Unidade')),
                ('status', models.CharField(default='ok', help_text='Status da leitura (ok, error, warning, etc.)', max_length=50, verbose_name='Status')),
                ('quality', models.FloatField(default=100.0, help_text='Qualidade da leitura em percentual (0-100%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Qualidade (%)')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('raw_data', models.JSONField(blank=True, help_text='Dados brutos recebidos do sensor em formato JSON', null=True, verbose_name='Dados Brutos')),
                ('additional_data', models.JSONField(blank=True, help_text='Dados específicos do tipo de sensor (JSON)', null=True, verbose_name='Dados Adicionais')),
                ('sensor', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='data_readings', to='sensor_management.sensor', verbose_name='Sensor')),
            ],
            options={
                'verbose_name': 'Dado do Sensor',
                'verbose_name_plural': 'Dados dos Sensores',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SensorAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('threshold', 'Limite Atingido'), ('disconnection', 'Desconexão'), ('error', 'Erro de Comunicação'), ('maintenance', 'Manutenção Necessária'), ('other', 'Outro')], max_length=20, verbose_name='Tipo de Alerta')),
                ('level', models.CharField(choices=[('info', 'Informação'), ('warning', 'Aviso'), ('error', 'Erro'), ('critical', 'Crítico')], default='info', max_length=10, verbose_name='Nível do Alerta')),
                ('message', models.TextField(help_text='Mensagem descritiva do alerta', verbose_name='Mensagem')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o alerta está ativo', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Resolução')),
                ('sensor', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='alerts', to='sensor_management.sensor', verbose_name='Sensor')),
            ],
            options={
                'verbose_name': 'Alerta do Sensor',
                'verbose_name_plural': 'Alertas dos Sensores',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('ip_address', 'port')},
        ),
        migrations.AddIndex(
            model_name='sensordata',
            index=models.Index(fields=['sensor', '-timestamp'], name='sensor_man_sensor_id_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordata',
            index=models.Index(fields=['-timestamp'], name='sensor_man_timesta_123456_idx'),
        ),
    ]
