from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import connection
import os


class Command(BaseCommand):
    """
    Comando para configura√ß√£o autom√°tica no Render.
    
    Este comando √© executado automaticamente durante o deploy no Render
    para configurar dados iniciais sem interven√ß√£o manual.
    
    Uso:
    python manage.py auto_setup_render
    """
    
    help = 'Configura√ß√£o autom√°tica para deploy no Render'
    
    def handle(self, *args, **options):
        """Fun√ß√£o principal do comando."""
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando configura√ß√£o autom√°tica para Render...')
        )
        
        # Verificar se estamos em ambiente de produ√ß√£o
        is_production = os.getenv('RENDER', False) or os.getenv('DJANGO_ENV') == 'production'
        auto_setup_enabled = os.getenv('AUTO_SETUP_DATA', 'true').lower() == 'true'
        
        if is_production:
            self.stdout.write(
                self.style.SUCCESS('üåê Ambiente de produ√ß√£o detectado (Render)')
            )
        else:
            self.stdout.write(
                self.style.WARNING('üíª Ambiente de desenvolvimento detectado')
            )
        
        try:
            # Executar migra√ß√µes
            self.stdout.write('üìä Executando migra√ß√µes...')
            call_command('migrate', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Migra√ß√µes executadas com sucesso')
            )
            
            # Coletar arquivos est√°ticos
            self.stdout.write('üìÅ Coletando arquivos est√°ticos...')
            call_command('collectstatic', '--noinput', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Arquivos est√°ticos coletados')
            )
            
            # Configurar dados iniciais (apenas se n√£o existirem)
            if auto_setup_enabled:
                self.stdout.write('üîß Configurando dados iniciais...')
                call_command('setup_initial_data', verbosity=0)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Dados iniciais configurados')
                )
            else:
                self.stdout.write(
                    self.style.WARNING('‚è≠Ô∏è Setup autom√°tico de dados desabilitado (AUTO_SETUP_DATA=false)')
                )
            
            # Verificar status do banco
            self.check_database_status()
            
            self.stdout.write(
                self.style.SUCCESS('üéâ Configura√ß√£o autom√°tica conclu√≠da com sucesso!')
            )
            
            if is_production:
                self.stdout.write(
                    self.style.WARNING(
                        '\nüìã Informa√ß√µes de acesso:\n'
                        '‚Ä¢ Admin: /admin/\n'
                        '‚Ä¢ Usu√°rio: admin\n'
                        '‚Ä¢ Senha: admin123\n'
                        '‚Ä¢ Dashboard: /dashboard/'
                    )
                )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro durante configura√ß√£o: {str(e)}')
            )
            raise
    
    def check_database_status(self):
        """Verifica o status do banco de dados."""
        try:
            from django.db import connection
            
            # Obter lista de tabelas de forma compat√≠vel com todos os bancos
            table_names = connection.introspection.table_names()
            
            # Verificar se as tabelas principais existem
            required_tables = [
                'core_user',
                'plant_viewer_buildingplan',
                'sensor_management_sensor',
                'sensor_management_sensordata'
            ]
            
            existing_tables = [table for table in required_tables if table in table_names]
            
            if len(existing_tables) >= 4:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Banco de dados configurado corretamente')
                )
                self.stdout.write(
                    self.style.SUCCESS(f'   Tabelas encontradas: {len(table_names)}')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è Algumas tabelas podem estar faltando ({len(existing_tables)}/4)')
                )
                self.stdout.write(
                    self.style.WARNING(f'   Tabelas encontradas: {existing_tables}')
                )
                    
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è N√£o foi poss√≠vel verificar o banco: {e}')
            )
